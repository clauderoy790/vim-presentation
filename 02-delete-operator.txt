paZckage maiDn
DELETE LINE

DELETE THIS LINE
ALSO DELETE THIS ONE

Would it be possible to delete: THE REST OF THIS LINE

this must not be deleted (THAT'S A LIE) at all cost

import (
        "clauderoy790/advent-of-code-2021/helpers"
        "fmt"
        "strconv"
        "strings"
)

var DELETE pairs map[DELETE_ME]uint64
var instructions map[string]string

func FUNCTION_TO_DELETE() {
       fmt.Println("delete me") 
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
}

// What is this doing here?
<html>
        <p>Hello</p>
</html>

func ANOTHER_FUNCTION_TO_DELETE() {
       fmt.Println("delete me") 
}

func main() {
	strs := helpers.GetInputStrings("day14")
	tp := parseInput(DELETE_ME)
	part2(40, tp)
	// real answers
	// 2188189693529
	// my answers
	// 2188189693529
	// after 40 steps:
	// 2188189693529
	// 2911561572630
}

// Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
// After step 1: NCNBCHB | N:2 H:1
// After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
// After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
// After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:

func part2(steps int, template string) {
	pairs = stringToPairs(template)
	for i := 0; i < steps; i++ {
		pairs = processInstructions()
		fmt.Printf("after %v step\n", (i + 1))
		printRunes()
	}

	// count runes
	count := getRuneCount()
	_, most := countMostRune(count)
	_, least := countLeastRune(count)
	fmt.Println("P2: ", (most - least))
}

func processInstructions() map[string]uint64 {
	p := map[string]uint64{}
	// for k, v := range pairs {
	// 	p[k] = v
	// }

	for k, v := range pairs {
		if ins, ok := instructions[k]; ok {
			newStr := insertStringAt(k, ins, 1)
			newP := stringToPairs(newStr)
			// multiply pair by values
			for k2, v2 := range newP {
				p[k2] += v2 * v
			}
		}
	}
	return p
}

// delete hidden
must be deleted

func printRunes() {
	runeCount := getRuneCount()
	rm, m := countMostRune(runeCount)
	rl, l := countLeastRune(runeCount)
	fmt.Printf("The most present letter is %v with %v times and the least present letter is %v with %v times \n", rm, m, rl, l)

}

func stringToPairs(str string) map[string]uint64 {
	newPairs := map[string]uint64{}
	for i := 0; i < len(str)-1; i++ {
		newPairs[str[i:i+2]]++
	}
	return newPairs
}

func insertStringAt(str string, sub string, pos int) string {
	if pos < 0 || pos >= len(str) {
		panic("invalid pos: " + strconv.Itoa(pos))
	}
	runes := []rune(str)
	temp := append(runes[:pos], []rune(sub)...)
	runes = []rune(str)
	temp = append(temp, runes[pos:]...)

	return string(temp)
}

func getRuneCount() map[string]uint64 {
	m := map[string]uint64{}

	for k, v := range pairs {
		for _, r := range k {
			m[string(r)] += v
		}
	}

	//real count
	for k, v := range m {
		if v%2 != 0 {
			m[k]++
		}

		m[k] /= 2
	}

	return m
}

func countMostRune(runes map[string]uint64) (string, uint64) {
	r := ""
	m := uint64(0)
	for k, v := range runes {
		if v > m {
			m = v
			r = k
		}
	}
	return r, m
}

// delete me
// delete me as well

func countLeastRune(runes map[string]uint64) (string, uint64) {
	r := ""
	var l uint64 = 10000000000000000000
	for k, v := range runes {
		if v < l {
			l = v
			r = k
		}
	}
	return r, l
}

func findMostCommonLetter(pairs map[string]uint64) map[rune]uint64 {
	m := make(map[rune]uint64)
	most := make(map[rune]uint64)
	for k, v := range pairs {
		for _, r := range k {
			m[r] += uint64(v)
		}
	}
	// divide
	for k, v := range m {
		if v%2 == 1 {
			m[k]++
		}
		m[k] /= 2
	}

	fmt.Println("appearaces: ", m)

	r := ' '
	c := uint64(0)
	// find most common
	for k, v := range m {
		if v > c {
			c = v
			r = k
		}
	}
	most[r] = c

	r = ' '
	c = uint64(10000000000000000000)
	// find least
	for k, v := range m {
		if v < c {
			c = v
			r = k
		}
	}
	most[r] = c
	return most
}

// delete this character -> T

func parseInput(strs []string) string {
	str := strings.TrimSpace(strs[0])
	instructions = make(map[string]string)
	for _, str := range strs {
		if len(str) == 0 || !strings.Contains(str, "->") {
			continue
		}

		sp := strings.Split(str, "->")
		for i := range sp {
			sp[i] = strings.TrimSpace(sp[i])
		}
		instructions[sp[0]] = sp[1]
	}
	return str
}

s
        // 2188189693529
        // my answers
        // 2188189693529
        // after 40 steps:
        // 2188189693529
        // 2911561572630
}

func main() {
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
        // real answers
        // 2188189693529
        // my answers
        // 2188189693529
        // after 40 steps:
        // 2188189693529
        // 2911561572630
}

// Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
// After step 1: NCNBCHB | N:2 H:1
// After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
// After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
// After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:

func part2(steps int, template string) {
        pairs = stringToPairs(template)
        for i := 0; i < steps; i++ {
"01-intro-moving-around.txt" 198L, 3726B
package main
sdfsddsf

import (
        "clauderoy790/advent-of-code-2021/helpers"
        "fmt"
        "strconv"
        "strings"
)

var pairs map[string]uint64
var instructions map[string]string

func main() {
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
        // real answers
        // 2188189693529
        // my answers
        // 2188189693529
        // after 40 steps:
        // 2188189693529
        // 2911561572630
}

// Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
// After step 1: NCNBCHB | N:2 H:1
// After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
// After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
// After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:

func part2(steps int, template string) {
        pairs = stringToPairs(template)
        for i := 0; i < steps; i++ {
package main

import (
        "clauderoy790/advent-of-code-2021/helpers"
        "fmt"
        "strconv"
        "strings"
)

var pairs map[string]uint64
var instructions map[string]string

func main() {
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
                pairs = processInstructions()
                fmt.Printf("after %v step\n", (i + 1))
                printRunes()
        }
package main
package main
package main
Last login: Fri Jan 21 06:42:03 on ttys000
package main

import (
        "clauderoy790/advent-of-code-2021/helpers"
        "fmt"
        "strconv"
        "strings"
)

var pairs map[string]uint64
var instructions map[string]string

func main() {
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
        // real answers
        // 2188189693529
        // my answers
        // 2188189693529
        // after 40 steps:
        // 2188189693529
        // 2911561572630
}

// Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
// After step 1: NCNBCHB | N:2 H:1
// After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
// After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
// After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:

func part2(steps int, template string) {
        pairs = stringToPairs(template)
        for i := 0; i < steps; i++ {
                pairs = processInstructions()
                fmt.Printf("after %v step\n", (i + 1))
                printRunes()
        }

        // count runes
        c := uint64(0)
        // find most common
        for k, v := range m {
                if v > c {
                        c = v
                        r = k
                }
        }
        most[r] = c

        r = ' '
        c = uint64(10000000000000000000)
        // find least
        for k, v := range m {
                if v < c {
                        c = v
                        r = k
                }
        }
        most[r] = c
        return most
}

func parseInput(strs []string) string {
        str := strings.TrimSpace(strs[0])
        instructions = make(map[string]string)
        for _, str := range strs {
                if len(str) == 0 || !strings.Contains(str, "->") {
                        continue
                }

                sp := strings.Split(str, "->")
                for i := range sp {
                        sp[i] = strings.TrimSpace(sp[i])
                }
                instructions[sp[0]] = sp[1]
        }
        return str
}
  1 package main
  2
  3 import (
  4         "clauderoy790/advent-of-code-2021/helpers"
  5         "fmt"
  6         "strconv"
  7         "strings"
  8 )
  9
 10 var pairs map[string]uint64
 11 var instructions map[string]string
 12
 13 func main() {
 14         strs := helpers.GetInputStrings("day14")
 15         tp := parseInput(strs)
 16         part2(40, tp)
 17         // real answers
 18         // 2188189693529
 19         // my answers
 20         // 2188189693529
 21         // after 40 steps:
 22         // 2188189693529
 23         // 2911561572630
 24 }
 25
 26 // Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
 27 // After step 1: NCNBCHB | N:2 H:1
 28 // After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
 29 // After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
 30 // After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:
 31
 32 func part2(steps int, template string) {
 33         pairs = stringToPairs(template)
 34         for i := 0; i < steps; i++ {
 35                 pairs = processInstructions()
 36                 fmt.Printf("after %v step\n", (i + 1))
 37                 printRunes()
 38         }
 39
 40         // count runes
:set number
158         c := uint64(0)
159         // find most common
160         for k, v := range m {
161                 if v > c {
162                         c = v
163                         r = k
164                 }
165         }
166         most[r] = c
167
168         r = ' '
169         c = uint64(10000000000000000000)
170         // find least
171         for k, v := range m {
172                 if v < c {
173                         c = v
174                         r = k
175                 }
176         }
177         most[r] = c
178         return most
179 }
180
181 func parseInput(strs []string) string {
182         str := strings.TrimSpace(strs[0])
183         instructions = make(map[string]string)
184         for _, str := range strs {
185                 if len(str) == 0 || !strings.Contains(str, "->") {
186                         continue
187                 }
188
189                 sp := strings.Split(str, "->")
190                 for i := range sp {
191                         sp[i] = strings.TrimSpace(sp[i])
192                 }
193                 instructions[sp[0]] = sp[1]
194         }
195         return str
196 }
197
 81
114
115 func countMostRune(runes map[string]uint64) (string, uint64) {
116         r := ""
117         m := uint64(0)
118         for k, v := range runes {
119                 if v > m {
120                         m = v
121                         r = k
122                 }
123         }
124         return r, m
125 }
126
127 func countLeastRune(runes map[string]uint64) (string, uint64) {
128         r := ""
129         var l uint64 = 10000000000000000000
130         for k, v := range runes {
131                 if v < l {
132                         l = v
133                         r = k
134                 }
135         }
136         return r, l
137 }
138
139 func findMostCommonLetter(pairs map[string]uint64) map[rune]uint64 {
140         m := make(map[rune]uint64)
141         most := make(map[rune]uint64)
142         for k, v := range pairs {
143                 for _, r := range k {
144                         m[r] += uint64(v)
145                 }
146         }
147         // divide
148         for k, v := range m {
149                 if v%2 == 1 {
150                         m[k]++
151                 }
152                 m[k] /= 2
153         }
1 change; before #6  3 seconds ago
Darwin MBP-5995 20.6.0 x86_64
 6:47  up 7 mins, 3 users, load averages: 3.12 4.56 2.73
 ~/Git  cd clauderoy790/                                                                                        Fri Jan 21 06:47:38 2022
 ~/G/clauderoy790  ls                                                                                           Fri Jan 21 06:47:52 2022
package main

import (
        "clauderoy790/advent-of-code-2021/helpers"
        "fmt"
        "strconv"
        "strings"
)

var pairs map[string]uint64
var instructions map[string]string

func main() {
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
        // real answers
        // 2188189693529
        // my answers
        // 2188189693529
        // after 40 steps:
        // 2188189693529
        // 2911561572630
}

// Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
// After step 1: NCNBCHB | N:2 H:1
// After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
// After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
// After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:

func part2(steps int, template string) {
        pairs = stringToPairs(template)
        for i := 0; i < steps; i++ {
                pairs = processInstructions()
                fmt.Printf("after %v step\n", (i + 1))
                printRunes()
        }

        // count runes
-- VISUAL LINE --
advent-of-code-2021              go-external-lib                  gratitude-journal-ionic          test
algorithms-practice-go           go-mock-test                     ionic-demo                       test-tabs
package main

import (
        "clauderoy790/advent-of-code-2021/helpers"
        "fmt"
        "strconv"
        "strings"
)

var pairs map[string]uint64
var instructions map[string]string

func main() {
        strs := helpers.GetInputStrings("day14")
        tp := parseInput(strs)
        part2(40, tp)
        // real answers
        // 2188189693529
        // my answers
        // 2188189693529
        // after 40 steps:
        // 2188189693529
        // 2911561572630
}

// Template:     NNCB NN: 1, NC: 1, CB: 1 | N: 2, C:1, B:1
// After step 1: NCNBCHB | N:2 H:1
// After step 2: NBCCNBBBCBHCB BB:2 BC:2 BH: 1 CB:2 CC: 1 CN:1 HC:1 NB:2 | N:2 B:6 C:4 H:1
// After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB nb bb bc bn nc cn bb nb bn nb bb ch | B: 10 H: 3 | BB:
// After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB | N: B: H:

func part2(steps int, template string) {
        pairs = stringToPairs(template)
        for i := 0; i < steps; i++ {
                pairs = processInstructions()
                fmt.Printf("after %v step\n", (i + 1))
                printRunes()
        }

        // count runes
-- VISUAL LINE --
        c := uint64(0)
        // find most common
        for k, v := range m {
                if v > c {
                        c = v
                        r = k
                }
        }
        most[r] = c

        r = ' '
        c = uint64(10000000000000000000)
        // find least
        for k, v := range m {
                if v < c {
                        c = v
                        r = k
                }
        }
        most[r] = c
        return most
}

func parseInput(strs []string) string {
        str := strings.TrimSpace(strs[0])
        instructions = make(map[string]string)
        for _, str := range strs {
                if len(str) == 0 || !strings.Contains(str, "->") {
                        continue
                }

                sp := strings.Split(str, "->")
                for i := range sp {
                        sp[i] = strings.TrimSpace(sp[i])
                }
                instructions[sp[0]] = sp[1]
        }
        return str
}
